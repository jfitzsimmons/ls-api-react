{"version":3,"sources":["Search.js","Helpers.js","Entity.js","RelationDetails.js","Related.js","App.js","serviceWorker.js","index.js"],"names":["Component","paginate","direction","this","setState","prevState","page","Entity","constructor","props","super","objToQueryString","obj","keyValuePairs","Object","keys","forEach","key","hasOwnProperty","push","encodeURIComponent","join","state","returnError","data","bind","componentDidMount","fetchSearchData","componentDidUpdate","prevProps","term","getCssValuePrefix","rtrnVal","prefixes","dom","document","createElement","i","length","style","background","setStyle","queryString","fetch","method","then","response","json","responseData","catch","error","console","log","render","setId","className","attributes","name","blurb","summary","type","onClick","id","disabled","viewBox","cx","cy","r","RelationDetails","PureComponent","included","getRelationData","Related","relationId","entityId","meta","getRelationshipData","eid","myDetails","descriptions","relation","desc","description","entityId1","entity1_id","entity2_id","pageCount","App","updateTerm","subject","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b436089b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport './App.scss';\n\nconst KeyCodes = {\n  comma: 188,\n  enter: 13,\n};\n\nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\n\nexport class Search extends Component {\nconstructor(props) {\n  super(props);\n  this.state = {\n    tags: [\n      { id: \"trump\", text: \"Trump\" },\n    ],\n    suggestions: [\n      { id: \"earth\", text: \"Earth\" },\n      { id: 'portrait', text: 'Portrait' },\n      { id: 'war', text: 'War' },\n      { id: 'mountain', text: 'Mountain' },\n      { id: 'tree', text: 'Tree' },\n      { id: 'lake', text: 'Lake' },\n      { id: 'princess', text: 'Princess' },\n      { id: 'sky', text: 'Sky' },\n      { id: 'river', text: 'River' },\n      { id: 'dog', text: 'Dog' },\n      { id: 'wolf', text: 'Wolf' },\n      { id: 'forest', text: 'Forest' },\n      { id: 'music', text: 'Music' },\n      { id: 'sunset', text: 'Sunset' },\n      { id: 'king', text: 'King' },\n      { id: 'battle', text: 'Battle' },\n      { id: 'pond', text: 'Pond' },\n      { id: 'flower', text: 'Flower' },\n      { id: 'god', text: 'God' },\n      { id: 'farm', text: 'Farm' },\n      { id: 'horse', text: 'Horse' },\n      { id: 'figure', text: 'Figure' },\n      { id: 'life', text: 'Life' },\n      { id: 'landscape', text: 'Landscape' },\n      { id: 'bridge', text: 'Bridge' },\n      { id: 'water', text: 'Water' },\n      { id: 'day', text: 'Day' },\n      { id: 'man', text: 'Man' },\n      { id: 'woman', text: 'Woman' },\n      { id: 'people', text: 'People' },\n      { id: 'family', text: 'Family' },\n      { id: 'school', text: 'School' },\n      { id: 'country', text: 'Country' },\n      { id: 'hand', text: 'Hand' },\n      { id: 'night', text: 'Night' },\n      { id: 'home', text: 'Home' },\n      { id: 'mother', text: 'Mother' },\n      { id: 'story', text: 'Story' },\n      { id: 'book', text: 'Book' },\n      { id: 'house', text: 'House' },\n      { id: 'father', text: 'Father' },\n      { id: 'game', text: 'Game' },\n      { id: 'city', text: 'City' },\n      { id: 'body', text: 'Body' },\n      { id: 'face', text: 'Face' },\n      { id: 'party', text: 'Party' },\n      { id: 'morning', text: 'Morning' },\n      { id: 'girl', text: 'Girl' },\n      { id: 'boy', text: 'Boy' },\n      { id: 'sea', text: 'Sea' },\n      { id: 'jesus', text: 'Jesus' },\n      { id: 'view', text: 'View' },\n      { id: 'abstract', text: 'Abstract' },\n      { id: 'beach', text: 'Beach' },\n      { id: 'nude', text: 'Nude' },\n      { id: 'sand', text: 'Sand' },\n      { id: 'moon', text: 'Moon' },\n      { id: 'autumn', text: 'Autumn' },\n      { id: 'spring', text: 'Spring' },\n      { id: 'summer', text: 'Summer' },\n      { id: 'winter', text: 'Winter' },\n      { id: 'bird', text: 'Bird' },\n      { id: 'festival', text: 'Festival' },\n      { id: 'garden', text: 'Garden' },\n      { id: 'son', text: 'Son' },\n      { id: 'daughter', text: 'Daughter' },\n      { id: 'dance', text: 'Dance' },\n      { id: 'roman', text: 'Roman' },\n      { id: 'warrior', text: 'Warrior' },\n      { id: 'statue', text: 'Statue' },\n      { id: 'dream', text: 'Dream' },\n      { id: 'fruit', text: 'Fruit' },\n      { id: 'wood', text: 'Wood' },\n      { id: 'child', text: 'Child' },\n      { id: 'christ', text: 'Christ' },\n      { id: 'cloud', text: 'Cloud' },\n      { id: 'wave', text: 'Wave' },\n      { id: 'angel', text: 'Angel' },\n      { id: 'scene', text: 'Scene' },\n      { id: 'steet', text: 'Street' },\n      { id: 'boat', text: 'Boat' },\n      { id: 'ship', text: 'Ship' },\n      { id: 'window', text: 'Window' },\n      { id: 'balcony', text: 'Balcony' },\n      { id: 'lady', text: 'Lady' },\n      { id: 'saint', text: 'Saint' },\n      { id: 'church', text: 'Church' },\n      { id: 'ink', text: 'Ink' },\n      { id: 'oil', text: 'Oil' },\n      { id: 'canvas', text: 'Canvas' },\n      { id: 'mourning', text: 'Mourning' },\n      { id: 'panel', text: 'Panel' },\n      { id: 'scroll', text: 'Scroll' },\n      { id: 'rock', text: 'Rock' },\n      { id: 'century', text: 'Century' },\n      { id: 'light', text: 'Light' },\n      { id: 'fire', text: 'Fire' },\n      { id: 'magic', text: 'Magic' },\n      { id: 'gold', text: 'Gold' },\n      { id: 'snow', text: 'Snow' },\n      { id: 'stream', text: 'Stream' },\n      { id: 'silk', text: 'Silk' },\n      { id: 'paint', text: 'Paint' },\n      { id: 'black', text: 'Black' },\n      { id: 'white', text: 'White' },\n      { id: 'dragon', text: 'Dragon' },\n      { id: 'wine', text: 'Wine' },\n      { id: 'lion', text: 'Lion' },\n      { id: 'tiger', text: 'Tiger' },\n      { id: 'bear', text: 'Bear' },\n      { id: 'cross', text: 'Cross' },\n      { id: 'cat', text: 'Cat' },\n      { id: 'wild', text: 'Wild' },\n      { id: 'wind', text: 'Wind' },\n      { id: 'wedding', text: 'Wedding' },\n      { id: 'friend', text: 'Friend' },\n      { id: 'prince', text: 'Prince' },\n      { id: 'death', text: 'Death' },\n      { id: 'foot', text: 'Foot' },\n      { id: 'birth', text: 'Birth' },\n      { id: 'devil', text: 'Devil' },\n      { id: 'market', text: 'Market' },\n      { id: 'brook', text: 'Brook' },\n      { id: 'square', text: 'Square' },\n      { id: 'fish', text: 'Fish' },\n      { id: 'courtesan', text: 'Courtesan' },\n      { id: 'tale', text: 'Tale' },\n      { id: 'sketch', text: 'Sketch' },\n      { id: 'grave', text: 'Grave' },\n      { id: 'train', text: 'Train' },\n      { id: 'miracle', text: 'Miracle' },\n      { id: 'lamentation', text: 'Lamentation' }\n    ]\n  };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleAddition = this.handleAddition.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  setTagList(){\n    return Array.prototype.map.call(this.state.tags, t => t.text).toString();\n  }\n\n  componentDidMount() {\n    let node = document.querySelector('.ReactTags__tagInputField');\n    node.insertAdjacentHTML('afterend', '<span class=\"bottom line\"></span><span class=\"right line\"></span><span class=\"top line\"></span><span class=\"left line\"></span>');\n  }\n\n  handleDelete(i) {\n    const { tags } = this.state;\n    this.setState({\n      tags: tags.filter((tag, index) => index !== i),\n      },() => { this.props.update(this.setTagList()); }\n    );\n  }\n\n  handleAddition(tag) {\n    this.setState(\n      state => ({ tags: [...state.tags, tag] }),\n      () => { this.props.update(this.setTagList()); }\n    );\n  }\n\n  handleDrag(tag, currPos, newPos) {\n    const tags = [...this.state.tags];\n    const newTags = tags.slice();\n    newTags.splice(currPos, 1);\n    newTags.splice(newPos, 0, tag);\n    this.setState({ tags: newTags });\n  }\n\n  render() {\n    const { tags, suggestions } = this.state;\n    return (\n      <div>\n        <div className=\"search\">\n          <ReactTags tags={tags}\n              suggestions={suggestions}\n              handleDelete={this.handleDelete}\n              handleAddition={this.handleAddition}\n              handleDrag={this.handleDrag}\n              delimiters={delimiters}\n              onChange={this.handleAddition}\n              autofocus={false}/>\n        </div>\n      </div>\n    )\n  }\n};\n","export function paginate(direction) {\n  this.setState((prevState) => ({ page: prevState.page + direction }));\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.scss';\nimport { paginate } from './Helpers.js';\n\nexport class Entity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 1,\n      returnError: false,\n    };\n    this.data = {};\n    this.paginate = paginate.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSearchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { term } = this.props;\n    if (term !== prevProps.term) {\n      this.setState(\n        {\n          page: 0,\n        },\n        this.fetchSearchData()\n      );\n    }\n  }\n\n  getCssValuePrefix() {\n    let rtrnVal = '';\n    const prefixes = ['-o-', '-ms-', '-moz-', '-webkit-'];\n    let dom = document.createElement('div');\n    for (let i = 0; i < prefixes.length; i += 1) {\n      dom.style.background = `${prefixes[i]}linear-gradient(#000000, #ffffff)`;\n      if (dom.style.background) rtrnVal = prefixes[i];\n    }\n    dom = null;\n    return this.setStyle(rtrnVal);\n  }\n\n  objToQueryString = (obj) => {\n    const keyValuePairs = [];\n    Object.keys(obj).forEach((key) => {\n      if (obj && obj.hasOwnProperty(key)) {\n        keyValuePairs.push(encodeURIComponent(obj[key]));\n      }\n    });\n    return keyValuePairs.join('&');\n  };\n\n  queryString() {\n    const { term } = this.props;\n    return this.objToQueryString({\n      term,\n    });\n  }\n\n  fetchSearchData() {\n    // console.log(`${this.queryString()}`);\n    fetch(`https://littlesis.org/api/entities/search?q=${this.queryString()}`, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.data = responseData.data;\n        if (this.data.length === 0) {\n          return this.setState({\n            returnError: true,\n          });\n        }\n        this.setState({\n          page: 0,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          returnError: true,\n        });\n        console.log(error);\n      });\n  }\n\n  render() {\n    const { page } = this.state;\n    const { setId } = this.props;\n    if (this.data[page]) {\n      // this.getCssValuePrefix();\n      return (\n        <div>\n          <div className=\"render-container\">\n            <div>\n              <div>\n                <h1> {this.data[page].attributes.name} </h1>\n              </div>{' '}\n              <div> {this.data[page].attributes.blurb} </div>\n              <div> {this.data[page].attributes.summary} </div>{' '}\n            </div>{' '}\n            <div className=\"painting__paging page\">\n              {' '}\n              {page + 1} of {this.data.length} <br />\n              <button\n                type=\"button\"\n                className=\"prev\"\n                onClick={() => {\n                  this.paginate(-1);\n                  setId(this.data[page - 1].id);\n                }}\n                disabled={page === 0}\n              >\n                {' '}\n                previous{' '}\n              </button>{' '}\n              |{' '}\n              <button\n                type=\"button\"\n                className=\"next\"\n                onClick={() => {\n                  this.paginate(1);\n                  setId(this.data[page + 1].id);\n                }}\n                disabled={page === this.data.length - 1}\n              >\n                next\n              </button>\n            </div>{' '}\n          </div>{' '}\n        </div>\n      );\n    }\n    const { returnError, term } = this.state;\n    return (\n      <div>\n        <div className=\"render-container\">\n          {' '}\n          {returnError ? (\n            <div className=\"search-error\">\n              ERROR : {term}\n              did not return any results{' '}\n            </div>\n          ) : (\n            <div className=\"painting flx-ctr\">\n              <div>\n                <svg className=\"loading\" viewBox=\"25 25 50 50\">\n                  <circle cx=\"50\" cy=\"50\" r=\"20\">\n                    {' '}\n                  </circle>{' '}\n                </svg>{' '}\n              </div>{' '}\n            </div>\n          )}{' '}\n        </div>{' '}\n      </div>\n    );\n  }\n}\n\nEntity.propTypes = {\n  term: PropTypes.string.isRequired,\n};\n","import React, { PureComponent } from 'react';\n\nimport './App.scss';\n\nexport class RelationDetails extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      included: {},\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props;\n    this.getRelationData(id);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { id } = this.props;\n    if (id !== prevProps.id) {\n      this.getRelationData(id);\n    }\n  }\n\n  getRelationData(id) {\n    fetch(`https://littlesis.org/api/relationships/${id}`, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.setState({\n          included: responseData.included[0],\n        });\n      });\n  }\n\n  render() {\n    const { included } = this.state;\n    if (included.attributes) {\n      return (\n        <div className=\"details\">\n          <h1>{included.attributes.name}</h1>\n          <p>{included.attributes.blurb}</p>\n          <p>{included.attributes.summary}</p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"map-wiki flx-ctr wrap\">\n        <div className=\"wiki\">\n          <div>\n            <svg className=\"loading\" viewBox=\"25 25 50 50\">\n              <circle cx=\"50\" cy=\"50\" r=\"20\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.scss';\nimport { RelationDetails } from './RelationDetails.js';\nimport { paginate } from './Helpers.js';\n\nexport class Related extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      page: 1,\n      relationId: 1727566,\n      entityId: 12,\n    };\n    this.meta = {};\n    this.paginate = paginate.bind(this);\n  }\n\n  componentDidMount() {\n    const { entityId } = this.props;\n    this.getRelationshipData(entityId);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { entityId } = this.props;\n    const { page } = this.state;\n\n    if (entityId !== prevProps.entityId) {\n      this.setState({\n        page: 1,\n      });\n      this.getRelationshipData(entityId);\n    }\n    if (page !== prevState.page) {\n      this.getRelationshipData(entityId);\n    }\n  }\n\n  getRelationshipData(eid) {\n    const { page } = this.state;\n    fetch(`https://littlesis.org/api/entities/${eid}/relationships?page=${page}`, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((responseData) => {\n        this.meta = responseData.meta;\n        // console.dir(this.data);\n        this.setState({\n          data: responseData.data,\n          relationId: responseData.data[0].attributes.id,\n          entityId: eid,\n        });\n      });\n  }\n\n  myDetails(relationId) {\n    this.setState({\n      relationId,\n    });\n  }\n\n  render() {\n    const { data, page, relationId, entityId } = this.state;\n    if (data[page]) {\n      // const relations = this.data;\n      // console.log(data.id);\n      const descriptions = [];\n      for (const relation of data) {\n        const desc = relation.attributes.description;\n        const entityId1 =\n          entityId === relation.attributes.entity1_id ? relation.attributes.entity2_id : relation.attributes.entity1_id;\n        descriptions.push(\n          <li key={relation.id}>\n            <div>{desc}</div>\n            <div className=\"buttons\">\n              <button type=\"button\" onClick={() => this.getRelationshipData(entityId1)}>\n                My Relations {entityId1}\n              </button>\n              <button className=\"button__details\" type=\"button\" onClick={() => this.myDetails(relation.id)}>\n                My Details {relation.id}\n              </button>\n            </div>\n          </li>\n        );\n      }\n      return (\n        <div className=\"flx-ctr wrap\">\n          <div className=\"relationships flx-hlf\">\n            <div className=\"relationships__results\">\n              <ul>{descriptions}</ul>\n            </div>\n            <div className=\"page\">\n              {page} of {this.meta.pageCount}\n              <br />\n              <button type=\"button\" className=\"prev\" onClick={() => this.paginate(-1)} disabled={page === 1}>\n                previous\n              </button>{' '}\n              |\n              <button\n                type=\"button\"\n                className=\"next\"\n                onClick={() => this.paginate(1)}\n                disabled={page === data.length - 1}\n              >\n                next\n              </button>\n            </div>\n          </div>\n          <div className=\"details flx-hlf\">\n            <RelationDetails id={relationId} />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"map-wiki flx-ctr wrap\">\n        <div className=\"wiki\">\n          <div>\n            <svg className=\"loading\" viewBox=\"25 25 50 50\">\n              <circle cx=\"50\" cy=\"50\" r=\"20\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nRelated.propTypes = {\n  entityId: PropTypes.number.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport './App.scss';\nimport { Search } from './Search.js';\nimport { Entity } from './Entity.js';\nimport { Related } from './Related.js';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: 'Trump',\n      id: 15108,\n    };\n    this.updateTerm = this.updateTerm.bind(this);\n    this.setId = this.setId.bind(this);\n  }\n\n  updateTerm(subject) {\n    this.setState({\n      term: subject,\n    });\n  }\n\n  setId(id) {\n    this.setState({\n      id,\n    });\n  }\n\n  render() {\n    const { term, id } = this.state;\n    return (\n      <div id=\"App\" className=\"App\">\n        {/* <Search update={this.updateTerm} /> */}\n        <Entity term={term} setId={this.setId} />\n        <Related entityId={id} />{' '}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}